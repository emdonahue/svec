#!/bin/zsh

# TODO debug fact that -e0 does not include 0s without -o (dot with orthogonal dimensions)

merge() {
    awk -F'\t' -vOFS=$'\t' '{while (2<NF) {$2'"$1"'=$NF; NF--}; print}'
}

zparseopts -A opts -E -D g:=opts
local PRECISION=${opts[-g]:-20}

CMD="$1"
shift
case "$CMD" in
    add) #Element-wise sum of 2 or more vectors
	#<vector> [<vector>]
	"$0" join "$@" | merge "+"
	;;
    analogy) #Computes the analogy vector from 3 word2vec embeddings king:man::queen:woman => -king+man+queen=woman
	#<vector> <vector> <vector>
	"$0" add <("$0" negate "$1") "$2" "$3"
	;;
    cooccurrences) #Prints a 2D matrix of counts of token co-occurrence within a given window computed from a whitespace-separated file of tokens
	#<window> <file>
	tr -s '[:space:]' '\n' < "$2" | awk -vW="$1" '$1 { for (i=1;i<=W;i++) { if(c[i]) { if (c[i]<$0) { print c[i],$0 } else { print $0,c[i] }}; c[i]=c[i+1] }; c[W]=$0 }' | sort | uniq -c | sed -E 's/[[:space:]]*([[:digit:]]+) ([[:alnum:]]+) ([[:alnum:]]+)/\2 \3\t\1/'
	;;
    counts) #Prints a vector of counts from a newline-separated stream of tokens
	#<file>
	sort "$1" | uniq -c | sed -E 's/[[:space:]]*([[:digit:]]+) (.+)/\2\t\1/'
	;;
    dot) #Dot product of multiple vectors
	#]<vector>]
	"$0" join "$@" | merge '*' | "$0" sum
	;;
    detriangularize) #Computes a dense 2D matrix from a triangular matrix by copying values across the diagonal
	#<triangular matrix>
	awk '{print} $1!=$2 {print $2,$1"\t"$3}' "$1" | sort
	;;
    --help|-h|help) #Print the list of subcommands or help information for a specific subcommand (e.g. "svec help dot")
	#<subcommand>
	{[[ -z "$1" ]] && echo 'usage: svec <subcommand> [arguments] (All subcommands respect the -g flag to specify the decimal precision of arithmetic)';
	 grep -A "${+1}" -- "$1.*)\s#" "$0" | sed -nE -e 's/\s*(.+)\)\s#(.+)$/\1 - \2/p' -e "s/^\s*#(.+)/usage: $1 \1/p"} | \
	    sed 's/^\s*//; 2,$ s/^/\t/'	
	;;
    join) #Concatenates numerical values with the same indices together for further processing (summation, multiplication, etc.). Empty rows are filled with 0, but if multiple vectors are joined, there may be fewer 0s than vectors. 
	#<vector> [<vector>]
	if [[ $# -le 1 ]]; then
	    cat "$1"
	elif [[ $# -eq 2 ]]; then
	    #-e requires -o, which means we must know the number of columns, so we must convert to a different schema
	    join -a1 -a2 -e0 -o 0,1.2,2.2 -t$'\037' <(sed 's/\t/'$'\037''/1' "$1") <(sed 's/\t/'$'\037''/1' "$2") | tr $'\037' '\t'
	else
	    "$0" join "$1" "$2" | {shift 2; "$0" join - "$@"}
	fi
	;;
    negate) #Negates a vector
	#<vector>
	"$0" scale -1 "$1"
	;;
    neighbors) #Accepts a 2D matrix and a vector and outputs a vector of cosine distances between the rows of the matrix and the input vector
	#<2D matrix> <vector>	
	local VEC=$(mktemp)
	trap "rm -f $VEC"
	local NORM=$(<"$2" tee "$VEC" | "$0" norm)
	join -a1 -e"0" -o 1.1,0,1.3,2.2 -12 <(sort -k2,2 "$1") "$VEC" | awk -M -vP="$PRECISION" -vVNORM="$NORM" '{v1=$(NF-1); v2=$NF; NF-=3; if (!d) d=$0; if (d!=$0) {output(); d=$0}; norm+=v1*v1; dot+=v1*v2} END {output()} function output(){ printf("%s\t%."P"g\n",d,dot/(sqrt(norm)*VNORM)); norm=dot=0 }'
	;;
    norm) #Computes the Euclidean norm of a vector, or an entry-wise Euclidean norm of a matrix
	#<vector>
	awk -M -vP="$PRECISION" '{n+=$NF*$NF} END {printf("%."P"g\n",sqrt(n))}' "$1"
	;;
    scale) #Scale all elements by a constant
	#<constant> <vector>
	awk -M -F'\t' -vP="$PRECISION" -vOFS='\t' '{$2*=('"$1"'); printf("%s\t%."P"g\n",$1,$2)}' "$2"
	;;
    sqrt) #Elementwise square root
	#<matrix>
	awk -M -vP="$PRECISION" -F'\t' -vOFS='\t' '{$2=sqrt($2); printf("%s\t%."P"g\n",$1,$2)}' "$1"
	;;
    square) #Elementwise square
	   #<matrix>
	awk -M -vP="$PRECISION" -F'\t' -vOFS='\t' '{$2*=$2; printf("%s\t%."P"g\n",$1,$2)}' "$1"
	;;
    sum) #Sums all elements and returns a constant
	#<vector>
	awk -M -vP="$PRECISION" '{n+=$NF} END {printf("%."P"g\n",n)}' "$1"
	;;
    vecnorm) #Eliminates the rightmost dimension of a matrix and computes the Euclidean norms to use as values for the remaining indices
	#<matrix>
	"$0" square "$1" | "$0" vecsum | "$0" sqrt
	;;
    vecsum) #Eliminates the rightmost dimension of a matrix and computes the sums to use as values for the remaining indices
	#<matrix>
	awk -M -vP="$PRECISION" '{v=$NF; NF-=2; if (!d) d=$0; if (d!=$0) {printsum(); d=$0}; s+=v} END {printsum()} function printsum(){ printf("%s\t%."P"g\n",d,s); s=0}' "$1"
	;;
    word2vec) #Computes matrix of log pointwise mutual information scores from the co occurrence matrix of a stream of whitespace-separated tokens that approximates word2vec embeddings
	#<co-occurrence window size> <token file>
	local BIGRAMS=$(mktemp) UNIGRAMS=$(mktemp)
	trap "rm -f $UNIGRAMS $BIGRAMS" EXIT
	local NUM_UNIGRAMS=$(tr -s '[:space:]' '\n' < "$2" | awk -vW="$1" -vUs="$0 counts ->$UNIGRAMS" -vBs="$0 counts ->$BIGRAMS" '{print | Us; for (i=1;i<=W;i++) { if(c[i]) { print (c[i]<$0) ? c[i]" "$0 : $0" "c[i] | Bs }; c[i]=c[i+1] }; c[W]=$0 } END {print NR}')
	join -12 <(join "$BIGRAMS" "$UNIGRAMS" | sort -k2,2) "$UNIGRAMS" | awk -M -vP="$PRECISION" -vU="$NUM_UNIGRAMS" -vB="$((NUM_UNIGRAMS * $1 - ($1*($1+1)/2)))" '{printf("%s %s\t%."P"g\n",$2,$1,$3/B/($4/U*($5/U)))}'
	#log($3)-log(B)-((log($4)+log($5)-(2*log(U))))
	;;
    *)
	"$0" help
	;;
esac
