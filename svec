#!/bin/zsh
#TODO optimize neighbors
#TODO add -s sorted flag to counts to add extra sorting step. maybe should be global
#TODO extend caching to all subcommands
#TODO join behaves incorrectly when presented with the zero vector (a completely empty file) using auto. recursively pass number of files processed and manually compute join output. test with subtract
#TODO experiment with </dev/tty for interactive julia, as in kb
#TODO 

set -o errexit
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unset c #Reserved inline comment variable

local SCRIPT="$0"

zparseopts -A opts -E -D g:
local PRECISION=${opts[-g]:-17} #Sets the decimal precision of numeric calculations. Defaults to 17, which is recommended by gawk docs for floating point.

export LC_COLLATE=C #Selects the locale for determining sort order of dimensions.

local US=$'\037'

svecawk() { #High precision awk for svec computations
    #3.322 is approximate bits of precision needed per decimal digit, per awk manual.
    awk -M -vPREC=$((3.322 * $PRECISION)) -vCONVFMT="%.${PRECISION}g" -vOFMT="%.${PRECISION}g" "$@"
}

tsvecawk() { #Tab delimited high precision awk for numeric computations
    svecawk -F'\t' -vOFS='\t' "$@"
}

arithmetic() { #Combine joined, tab-delimited columns with arithmetic operator
    tsvecawk '{while (2<NF) {$2'"$1"'=$NF; NF--}; print}'
}

self() { #Recursively call called script with called arguments
    "$SCRIPT" ${(kv)opts} "$@"
}

tmp() {
    local TMPFILE=$(mktemp --suffix=.svec "$@")
    trap "rm -rf $TMPFILE" EXIT
    echo "$TMPFILE"
}

cache() { #Return $1 if $1 is a file, or else write it to a temp file and return that
    if [[ -f "$1" ]]; then
	echo "$1"
    else
	local TMPFILE=$(tmp)
	cat "$1" > "$TMPFILE"
	echo "$TMPFILE"
    fi
}

cachein() { #STREAM TMP; Write STREAM to TMP if it is not already a file and write it to stdout. Used to cache transient data unless already backed by a file.
    [[ -f "$1" ]] && cat "$1" || tee <"${1:-/dev/stdin}" "$2"}

cachein2() { #Attempt to bind variable names directly in calling scope, but fails in subshells
    if [[ -f "$1" ]]; then
	typeset -g $2="$1"
	cat "$1"
    else
	typeset -g $2="$(tmp)"
	echo ${(P)2} >&2
	tee <"${1:-/dev/stdin}" "${(P)2}"
    fi
}

cacheout() { #STREAM TMP; Echo STREAM if it is a file, otherwise TMP. Used to identify the actual file created by cachein.
    [[ -f "$1" ]] && echo "$1" || echo "$2"
}

CMD="$1"
[[ $# -ne 0 ]] && shift
case "$CMD" in
    --help|-h|help) #[SUBCOMMAND]; Prints help text for SUBCOMMAND. If SUBCOMMAND omitted, prints list of subcommands.
	[[ $# -eq 0 ]] && echo 'svec - Streaming computations over sparse vectors and matrices for use in text mining and NLP\nUsage: svec SUBCOMMAND [ARGUMENTS...]\n\nGeneral Options:\n\t-g\tSpecifies decimal precision of arithmetic\n\nSubcommands:'
	sed -nE '/\s*'"$1"'\)\s#/'"${1:+,/^\s*;;\s*$/}"'{s/^[[:space:]]*([-|[:alnum:]]+)\)\s#([^;]*); (.*)/'"${${1-\t}:#$1}"'\1 \2\t\3/p; s/.*(\w+)[-+:]*=\w+ \$\{c#(.*); (.*)\}.*/\t-\1 \2\t\3/p}' "$0"
	;;

    abs) #MATRIX; Element-wise absolute value
	tsvecawk '{$2*= ($2<0 ? -1 : 1); print}' "${1:--}"
	;;
    
    add) #MATRIX [MATRIX...]; Element-wise sum of 2 or more matrices
	self join -a1 -a2 "$@" | arithmetic "+" | self sparse
	;;
    
    analogy) #VECTOR VECTOR VECTOR; Computes the analogy vector from 3 word2vec embeddings man:king::woman:queen => king-man+woman=queen
	self add <(self negate "$1") "$2" "$3"
	;;

    analogicalinfluence) #VECTOR VECTOR VECTOR VECTOR; Given the analogy man:king::woman:queen, computes how much each dimension of the imputed gender relationship vector woman-man contributes to the empirical relationship vector queen-king. Specifically, |q-k| - |(q-k) – (w-m)|, or the distance between the empirical relationship and the error introduced by the approximation, which measures which dimensions cover the most distance in the correct direction, discounted as high error makes them miss their mark. High positive values contribute more, low negatives less.
	#1:dim 2:m 3:k 4:w 5:q
	self join -a1 -a2 -e0 "$@" | tsvecawk 'BEGIN {print "dimension","|q-k|-|(q-k)–(w-m)|","|q-k|-|(q-k)–w|","|q-k|-|(q-k)+m|","|q-k|"} {truedist=$5-$3; error=truedist-($4-$2); print $1,abs(truedist)-abs(error),abs(truedist)-abs(truedist-$4),abs(truedist)-abs(truedist+$2),abs(truedist)} function abs(x) {return x<0 ? -x : x}'
	;;
    
    counts) #TOKENS; Prints a vector of counts from a newline-separated stream of tokens
	sort "${1:--}" | uniq -c | sed -E 's/[[:space:]]*([[:digit:]]+) (.+)/\2\t\1/'
	;;

    deserialize) #SERIALIZED; Deserializes Julia SparseMatrixCSC or SparseVector to ASCII svec format. 
	julia -e 'using SparseArrays, Serialization; (svec,_dims)=deserialize(stdin); (r,cv...)=findnz(sparse(svec)); for i=1:length(r); println(_dims[r[i]],length(cv)==2 ? " " : "",length(cv)==2 ? _dims[cv[1][i]] : "","\t",cv[end][i]); end' < "${1:-/dev/stdin}"
	;;

    dimensions) #MATRIX; Print only the dimensions (dropping the values).
	cut -f1 "${1:--}"
	;;
    
    dot) #MATRIX [MATRIX...]; Dot product of multiple vectors
	self join "$@" | arithmetic '*' | self sum
	;;

    index) #MATRIX; Generates a symbolic-numeric index of dimensions and maps an existing matrix from symbolic->numeric or numeric->symbolic dimensions. 
	zparseopts -F -D d:=REINDEX ${c#; Uses index to convert numeric indices to symbolic.}\
		   r:=REINDEX ${c#; Uses index to convert symbolic indices to numeric.}
	if [[ $REINDEX ]]; then
	    svecawk -vDEINDEX="${REINDEX[1]:#-r}" 'ARGIND==1 {if (DEINDEX) {dims[$2]=$1} else {dims[$1]=$2}} ARGIND>1 {for (i=1;i<NF;i++) {printf("%s%s",i==1?"":" ",dims[$i])}; print "\t"$NF}' "$REINDEX[2]" "$@"
	else
	    svecawk -vOFS='\t' '{for (i=1;i<NF;i++) {if (!($i in dim)) {dim[$i]=++ndim; print $i,dim[$i]}}}' "$1"
	fi
	;;
    
    join) #MATRIX [MATRIX...]; Concatenates numerical values with the same indices together for further processing (summation, multiplication, etc.). Empty rows are filled with 0, but if multiple vectors are joined, there may be fewer 0s than vectors.
	zparseopts -aJOINOPTS -F -D a+:- e:
	if [[ $# -le 1 ]]; then
	    cat "${1:--}"
	else
	    join $JOINOPTS -oauto -t'	' "$1" "$2" | {shift 2; self join $JOINOPTS -- - "$@"}
	fi
	;;

    julia) #[PROGRAM] SERIALIZED; Loads a serialized object into a Julia instance as svec. Symbolic dimensions are loaded as _dims. If -i is not specified, PROGRAM is interpreted as a function body and its return value is serialized along with _dims. Any value may be serialized for subsequent processing with the julia command, but only SparseArrays can be deserialized into ASCII svec format.
	zparseopts -F -D i=INTERACTIVE ${c#; Runs Julia in interactive mode.}\
		   u:=USING ${c#PACKAGE,...; Accepts a comma-separated list of packages to import before running the program.}
	local PROGRAM='using SparseArrays, Serialization'"${USING:+,$USING[2]}"'; (svec,_dims)=deserialize(ARGS[1]);'
	if [[ ! $INTERACTIVE ]]; then PROGRAM=$PROGRAM"function julia() $1 end; serialize(stdout,(julia(),_dims));"; shift; fi
	local SERIALIZED=$(cache "${1:-/dev/stdin}")
	if [[ $INTERACTIVE ]]; then
	    julia -i -e "$PROGRAM" "$SERIALIZED" </dev/tty
	else
	    julia -e "$PROGRAM" "$SERIALIZED"
	fi
	;;
    
    map) #EXPRESSION MATRIX; Performs an element-wise arithmetic calculation to the numeric value of each matrix index. The current value can be accessed as $2 or $NF. Results of the arithmetic expression are automatically assigned to the numeric value.
	tsvecawk '{$2='"$1"'; print $1,$2}' "${2:--}"
	;;

    minmax) #; Filters values to be within the specified minimum and/or maximum.
	zparseopts -F -D m:=MIN ${c#MINIMUM; Discard values <= MINIMUM}\
		   M:=MIN ${c#MINIMUM; Discard values < MINIMUM}\
		   x:=MAX ${c#MAXIMUM; Discard values >= MAXIMUM}\
		   X:=MAX ${c#MAXIMUM; Discard values > MAXIMUM}
	tsvecawk "${${MIN[2]:+$MIN[2]<${${MIN[1]:/-m/=}:/-M/}\$2}:-1} && ${${MAX[2]:+\$2<${${MAX[1]:/-x/=}:/-X/}$MAX[2]}:-1}" "$1"
	;;
    
    negate) #MATRIX; Negates a vector
	#<vector>
	self scale -1 "$1"
	;;

    neighbors) #VECTOR 2D-MATRIX; Accepts a 2D matrix and a vector and outputs a vector of cosine distances between the rows of the matrix and the input vector
	svecawk '1==ARGIND {vec[$1]=$2; norm+=$2*$2} 1<ARGIND && !neighbor {norm=sqrt(norm); for (i in vec) vec[i]/=norm} 1<ARGIND {n=$1} 1<ARGIND && neighbor!=n {print_neighbor(); neighbor=n; norm=0; dot=0} neighbor {dot+=$3*vec[$2]; norm+=$3*$3} END {print_neighbor()} function print_neighbor() { if (neighbor && dot && norm) print neighbor"\t"(dot/sqrt(norm))}' "$1" "$2"
	#slower but lower memory footprint #join -12 -o 1.1,0,1.3,2.2 <(self vecnormalize "${2:--}" | sort -k2,2) <(self normalize "$1") | sed -E 's/ ([^ ]+) ([^ ]+)$/\t\1\t\2/' | arithmetic '*' | sort -k1,1 | self vecsum
	;;

    norm) #MATRIX; Computes the entry-wise Euclidean norm of a matrix
	svecawk '{n+=$NF*$NF} END {print sqrt(n)}' "$1"
	;;

    normalize) #VECTOR; Normalizes VECTOR using the Euclidean norm.
	local VEC=$(tmp)
	local NORM=$(cachein "$1" "$VEC" | self norm)
	self map "\$2/$NORM" $(cacheout "$1" "$VEC")
	;;

    row) #DIMENSION MATRIX; Filters by rows where the leftmost column matches DIMENSION and returns an N-1 matrix by removing the leftmost dimension.
	grep -E "^$1 " "${2:--}" | sed -E 's/^[^ ]+ (.*)/\1/'
	;;

    pmi) #BIGRAMCOUNTS; Compute the pointwise mutual information of the BIGRAMCOUNTS as produced by running count on a bigram stream.
	zparseopts -F -D u=UNORDERED ${c#; Unordered bigrams - Assumes the bigrams are in normalized order and the matrix is symmetric, so only count them once per pair (counts are already sums of both directions).}
	local BIGRAMS=$(tmp) UNIGRAMS=$(tmp)
	local BCOUNT=$(cachein "$1" "$BIGRAMS" | tee >(self vecsum > "$UNIGRAMS") | if [[ $UNORDERED ]]; then self triangular; else cat; fi | self sum) #Input must be square matrix as dim 1 is used for unigram counts.
	join "$(cacheout "$1" "$BIGRAMS")" "$UNIGRAMS" | sort -k2,2 | join -12 -o 1.1,0,1.3,1.4,2.2 - "$UNIGRAMS" | sort -k1,2 | svecawk -vD="$BCOUNT" '{print $1,$2 "\t" (log($3) + log(D) - log($4) - log($5))}'	#log((#(w,c)*|D|) / (#(w)*#(c)))
	;;

    scale) #CONSTANT MATRIX; Scale all elements by a constant
	self map '$2*'"$1" "${2:--}"
	;;

    serialize) #MATRIX; Serializes 1D or 2D MATRIX to a Julia SparseArray. Output is a pair of a SparseArray and a map from numeric to symbolic dimensions to be used for deserializing.
	julia -e 'using SparseArrays, Serialization; rcv=[]; rows=UInt32[]; cols=UInt32[]; vals=Float64[]; _lookup=Dict{String,UInt32}(); _dims=Vector{String}(); for line in eachline(stdin); global rcv=split(line); push!(rows,get!(_lookup,rcv[1]) do; length(push!(_dims,rcv[1])); end); if (length(rcv)==3) push!(cols,get!(_lookup,rcv[2]) do; length(push!(_dims,rcv[2])); end); end; push!(vals,parse(Float64,rcv[end])); end; if (length(rcv)==3); svec=sparse(rows,cols,vals); else svec=sparsevec(rows,vals); end; serialize(stdout,(svec,_dims))' < "${1:-/dev/stdin}"
	;;

    sparse) #MATRIX; Removes 0 valued dimensions to create sparse vector or matrix
	tsvecawk '$NF!=0' "$1"
	;;

    sqrt) #MATRIX; Elementwise square root
	self map 'sqrt($2)' "${1:--}"
	;;

    square) #MATRIX; Elementwise square
	self map '$2*$2' "${1:--}"
	;;

    subtract) #MINUEND SUBTRAHEND...; Subtract one or more SUBTRAHEND matrices from MINUEND
	self join -a1 -a2 -e0 "$@" | arithmetic "-" | self sparse
	;;
	
    sum) #MATRIX; Sums all elements and returns a constant
	svecawk '{n+=$NF} END {print n}' "$1"
	;;

    symmetric) #LOWERTRIANGULAR; Converts a LOWERTRIANGULAR matrix into a symmetric matrix by reflecting the lower half across the diagonal.
	zparseopts -F -D u=UNSORTED ${c#; Do not sort the results into normalized svec format when reflecting. Faster if you only need counts, not joins.}
	svecawk '{print} $1!=$2 {print $2,$1"\t"$3}' "$1" | if [[ $UNSORTED ]]; then cat; else sort; fi
	;;

    triangular) #MATRIX; Converts between lower triangular and square 2D matrices by copying/dropping across the diagonal.
	svecawk '$1<=$2' "$1"
	;;

    vecnorm) #MATRIX; Eliminates the rightmost dimension of a matrix and computes the Euclidean norms to use as values for the remaining indices
	self square "${1:--}" | self vecsum | self sqrt
	;;

    vecnormalize) #MATRIX; Normalizes vectors defined by the first N-1 dimension of MATRIX
	local NORMS=$(tmp) VECS=$(tmp)
	< "${1:-/dev/stdin}" tee >(self vecnorm | sed "s/\t/$US\t/" > "$NORMS") > >(sed -E "s/( [^ ]+\t)/$US\1/" > "$VECS")
	join -t"$US" "$VECS" "$NORMS" | arithmetic '/' | tr -d "$US"
	;;

    vecsum) #MATRIX; Eliminates the rightmost dimension of a matrix and computes the sums to use as values for the remaining indices
	svecawk -vOFS='\t' '{v=$NF; NF-=2; if (!d) d=$0; if (d!=$0) {printsum(); d=$0}; s+=v} END {printsum()} function printsum(){ print d,s; s=0}' "${1:--}"
	;;

    *)
	if [[ -z "$CMD" ]]; then
	    "$0" help
	else
	    "$0" help 1>&2
	    exit 1
	fi
	;;
esac
