#!/bin/zsh

#TODO optimize neighbors
#TODO add -s sorted flag to counts to add extra sorting step. maybe should be global
#TODO extend caching to all subcommands

set -o errexit
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unset c #Reserved inline comment variable

local SCRIPT="$0"

zparseopts -A opts -E -D g:
local PRECISION=${opts[-g]:-17} #Sets the decimal precision of numeric calculations. Defaults to 17, which is recommended by gawk docs for floating point.

export LC_COLLATE=C #Selects the locale for determining sort order of dimensions.

local US=$'\037'

svecawk() { #High precision awk for svec computations
    #3.322 is approximate bits of precision needed per decimal digit, per awk manual.
    awk -M -vPREC=$((3.322 * $PRECISION)) -vCONVFMT="%.${PRECISION}g" -vOFMT="%.${PRECISION}g" "$@"
}

tsvecawk() { #Tab delimited high precision awk for numeric computations
    svecawk -F'\t' -vOFS='\t' "$@"
}

arithmetic() { #Combine joined, tab-delimited columns with arithmetic operator
    tsvecawk '{while (2<NF) {$2'"$1"'=$NF; NF--}; print}'
}

self() { #Recursively call called script with called arguments
    "$SCRIPT" ${(kv)opts} "$@"
}

tmp() {
    local TMPFILE=$(mktemp --suffix=.svec "$@")
    trap "rm -rf $TMPFILE" EXIT
    echo "$TMPFILE"
}

cache() {
    if [[ -f "$1" || "$1" -eq '-' ]]; then
	echo "$1"
    else
	local TMPFILE=$(tmp)
	cat > "$TMPFILE"
	echo "$TMPFILE"
    fi
}

cachein() {
    [[ -f "$1" ]] && cat "$1" || tee <"${1:-/dev/stdin}" "$2"}

cachein2() {
    if [[ -f "$1" ]]; then
	typeset -g $2="$1"
	cat "$1"
    else
	typeset -g $2="$(tmp)"
	echo ${(P)2} >&2
	tee <"${1:-/dev/stdin}" "${(P)2}"
    fi
}

cacheout() {
    [[ -f "$1" ]] && echo "$1" || echo "$2"
}

CMD="$1"
[[ $# -ne 0 ]] && shift
case "$CMD" in
    --help|-h|help) #[SUBCOMMAND]; Prints help text for SUBCOMMAND. If SUBCOMMAND omitted, prints list of subcommands.
	[[ $# -eq 0 ]] && echo 'svec - Streaming computations over sparse vectors and matrices for use in text mining and NLP\nUsage: svec SUBCOMMAND [ARGUMENTS...]\n\nGeneral Options:\n\t-g\tSpecifies decimal precision of arithmetic\n\nSubcommands:'
	sed -nE '/\s*'"$1"'\)\s#/'"${1:+,/^\s*;;\s*$/}"'{s/^[[:space:]]*([-|[:alnum:]]+)\)\s#([^;]*); (.*)/'"${${1-\t}:#$1}"'\1 \2\t\3/p; s/.*(\w+)[-+:]*=\w+ \$\{c#(.*); (.*)\}.*/\t-\1 \2\t\3/p}' "$0"
	;;

    abs) #MATRIX; Element-wise absolute value
	tsvecawk '{$2*= ($2<0 ? -1 : 1); print}' "${1:--}"
	;;
    
    add) #MATRIX [MATRIX...]; Element-wise sum of 2 or more matrices
	self join -a1 -a2 "$@" | arithmetic "+" | self sparse
	;;
    
    analogy) #VECTOR VECTOR VECTOR; Computes the analogy vector from 3 word2vec embeddings king:man::queen:woman => -king+man+queen=woman
	self add <(self negate "$1") "$2" "$3"
	;;

    counts) #TOKENS; Prints a vector of counts from a newline-separated stream of tokens
	sort "${1:--}" | uniq -c | sed -E 's/[[:space:]]*([[:digit:]]+) (.+)/\2\t\1/'
	;;

    dot) #MATRIX [MATRIX...]; Dot product of multiple vectors
	self join "$@" | arithmetic '*' | self sum
	;;

    join) #MATRIX [MATRIX...]; Concatenates numerical values with the same indices together for further processing (summation, multiplication, etc.). Empty rows are filled with 0, but if multiple vectors are joined, there may be fewer 0s than vectors.
	zparseopts -aJOINOPTS -F -D a+:- e:
	if [[ $# -le 1 ]]; then
	    cat "${1:--}"
	else
	    join $JOINOPTS -oauto -t'	' "$1" "$2" | {shift 2; self join $JOINOPTS -- - "$@"}
	fi
	;;

    julia) #MATRIX...; Opens an interactive Julia prompt on MATRIX loaded as an IndexedTable. Creates an array, "svec," which contains the IndexedTable objects in the same order as the arguments supplied.
	zparseopts -F -D v:=VARNAMES ${c#VARNAME[,VARNAME...]; Accepts a comma-separated list of variable names and assigns NDSparse objects from "svec" to each variable in order.}
	julia -ie 'using JuliaDB; svec=['${(j:,:)${:-"loadtable(\"${^@}\",indexcols=[],spacedelim=true,header_exists=false,output=\"$(tmp -d)\")"}}']' -e ${VARNAMES[2]:+"${VARNAMES[2]},=svec"}
	;;
    
    map) #EXPRESSION MATRIX; Performs an element-wise arithmetic calculation to the numeric value of each matrix index. The current value can be accessed as $2 or $NF. Results of the arithmetic expression are automatically assigned to the numeric value.
	tsvecawk '{$2='"$1"'; print $1,$2}' "${2:--}"
	;;

    minmax) #; Filters values to be within the specified minimum and/or maximum.
	zparseopts -F -D m:=MIN ${c#MINIMUM; Discard values <= MINIMUM}\
		   M:=MIN ${c#MINIMUM; Discard values < MINIMUM}\
		   x:=MAX ${c#MINIMUM; Discard values >= MAXIMUM}\
		   X:=MAX ${c#MINIMUM; Discard values > MAXIMUM}
	tsvecawk "${${MIN[2]:+$MIN[2]<${${MIN[1]:/-m/=}:/-M/}\$2}:-1} && ${${MAX[2]:+\$2<${${MAX[1]:/-x/=}:/-X/}$MAX[2]}:-1}" "$1"
	;;
    
    negate) #MATRIX; Negates a vector
	#<vector>
	self scale -1 "$1"
	;;

    neighbors) #VECTOR 2D-MATRIX; Accepts a 2D matrix and a vector and outputs a vector of cosine distances between the rows of the matrix and the input vector
	join -12 -o 1.1,0,1.3,2.2 <(self vecnormalize "${2:--}" | sort -k2,2) <(self normalize "$1") | sed -E 's/ ([^ ]+) ([^ ]+)$/\t\1\t\2/' | arithmetic '*' | sort -k1,1 | self vecsum
	#join <(self vecnormalize "${2:--}") <(self normalize "$1") #| sort -k2,2 #| svecawk 'NR==1 {d=$2} d==$2 {s+=$3*$4} d!=$2 {print $2,s; s=0; d=$2}'

	    #sed -E 's/ ([^ ]+) ([^ ]+)$/\t\1\t\2/' | arithmetic '*' | sort -k1,1 | self vecsum
	;;

    norm) #MATRIX; Computes the entry-wise Euclidean norm of a matrix
	svecawk '{n+=$NF*$NF} END {print sqrt(n)}' "$1"
	;;

    normalize) #VECTOR; Normalizes VECTOR using the Euclidean norm.
	local VEC=$(tmp)
	local NORM=$(cachein "$1" "$VEC" | self norm)
	self map "\$2/$NORM" $(cacheout "$1" "$VEC")
	;;

    row) #DIMENSION MATRIX; Filters by rows where the leftmost column matches DIMENSION and returns an N-1 matrix by removing the leftmost dimension.
	grep -E "^$1 " "${2:--}" | sed -E 's/^[^ ]+ (.*)/\1/'
	;;

    pmi) #BIGRAMCOUNTS; Compute the pointwise mutual information of the BIGRAMCOUNTS as produced by running count on a bigram stream.
	zparseopts -F -D u=UNORDERED ${c#; Unordered bigrams - Assumes the bigrams are in normalized order and the matrix is symmetric, so only count them once per pair.}
	local BIGRAMS=$(tmp) UNIGRAMS=$(tmp)
	local BCOUNT=$(cachein "$1" "$BIGRAMS" | tee >(self vecsum > "$UNIGRAMS") | if [[ $UNORDERED ]]; then self triangular; else cat; fi | self sum)
	join "$(cacheout "$1" "$BIGRAMS")" "$UNIGRAMS" | sort -k2,2 | join -12 -o 1.1,0,1.3,1.4,2.2 - "$UNIGRAMS" | sort -k1,2 | svecawk -vD="$BCOUNT" '{print $1,$2 "\t" (log($3) + log(D) - log($4) - log($5))}'	#log((#(w,c)*|D|) / (#(w)*#(c)))
	;;

    scale) #CONSTANT MATRIX; Scale all elements by a constant
	self map '$2*'"$1" "${2:--}"
	;;

    sparse) #MATRIX; Removes 0 valued dimensions to create sparse vector or matrix
	tsvecawk '$NF!=0' "$1"
	;;

    sqrt) #MATRIX; Elementwise square root
	self map 'sqrt($2)' "${1:--}"
	;;

    square) #MATRIX; Elementwise square
	self map '$2*$2' "${1:--}"
	;;

    subtract) #MINUEND SUBTRAHEND...; Subtract one or more SUBTRAHEND matrices from MINUEND
	self join -a1 -a2 -e0 "$@" | arithmetic "-" | self sparse
	;;
	
    sum) #MATRIX; Sums all elements and returns a constant
	svecawk '{n+=$NF} END {print n}' "$1"
	;;

    triangular) #MATRIX; Converts between triangular and square 2D matrices by copying/dropping across the diagonal.
	zparseopts -F -D d=SQUARE ${c#; De-triangularize the matrix into a dense square.}\
		   u=UNSORTED ${c#; Do not sort the results into normalized svec format. Faster if you only need counts, not joins.}
	if [[ $SQUARE ]]; then
	    svecawk '{print} $1!=$2 {print $2,$1"\t"$3}' "$1" | if [[ $UNSORTED ]]; then cat; else sort; fi
	else
	    svecawk '$1<=$2' "$1"
	fi
	;;

    vecnorm) #MATRIX; Eliminates the rightmost dimension of a matrix and computes the Euclidean norms to use as values for the remaining indices
	self square "${1:--}" | self vecsum | self sqrt
	;;

    vecnormalize) #MATRIX; Normalizes vectors defined by the first N-1 dimension of MATRIX
	local NORMS=$(tmp) VECS=$(tmp)
	< "${1:-/dev/stdin}" tee >(self vecnorm | sed "s/\t/$US\t/" > "$NORMS") > >(sed -E "s/( [^ ]+\t)/$US\1/" > "$VECS")
	join -t"$US" "$VECS" "$NORMS" | arithmetic '/' | tr -d "$US"
	;;

    vecsum) #MATRIX; Eliminates the rightmost dimension of a matrix and computes the sums to use as values for the remaining indices
	svecawk -vOFS='\t' '{v=$NF; NF-=2; if (!d) d=$0; if (d!=$0) {printsum(); d=$0}; s+=v} END {printsum()} function printsum(){ print d,s; s=0}' "${1:--}"
	;;

    word2vec) #WINDOW [TOKENS]; Computes matrix of log pointwise mutual information scores from the co occurrence matrix of a stream of whitespace-separated tokens that approximates word2vec embeddings
	local BIGRAMS=$(tmp) UNIGRAMS=$(tmp)
	local NUM_UNIGRAMS=$(tr -s '[:space:]' '\n' < "$2" | sed '1 {/^\s*$/d}' | svecawk -vW="$1" -vUs="$0 counts ->$UNIGRAMS" -vBs="$0 counts ->$BIGRAMS" '{print | Us; for (i=1;i<=W;i++) { if(c[i]) { print (c[i]<$0) ? c[i]" "$0 : $0" "c[i] | Bs }; c[i]=c[i+1] }; c[W]=$0 } END {print NR}')
	join -12 <(join "$BIGRAMS" "$UNIGRAMS" | sort -k2,2) "$UNIGRAMS" | svecawk -vU="$NUM_UNIGRAMS" -vB="$((NUM_UNIGRAMS * $1 - ($1*($1+1)/2)))" '{print $2,$1 "\t" $3/B/($4/U*($5/U))}'
	#log($3)-log(B)-((log($4)+log($5)-(2*log(U))))
	;;

    *)
	if [[ -z "$CMD" ]]; then
	    "$0" help
	else
	    "$0" help 1>&2
	    exit 1
	fi
	;;
esac
